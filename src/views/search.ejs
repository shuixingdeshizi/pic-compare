<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>source</title>

    <style>
      div, ul, li, p {
        margin: 0;
        padding: 0;
      }
      li {
        list-style: none;
      }


      #box{
        width: 300px;
        height: 300px;
        border:1px dashed #000;

        text-align:center;
      }

      .wrapper {
        max-width: 1000px;
        height: auto;
        margin: 0 auto;
      }
      #result {
        display: flex;
        flex-wrap: wrap;
        margin: 1rem 0;
      }
      .list {
        display: flex;
        flex-wrap: wrap;
        margin: 1rem 0;
      }
      .item {
        flex-grow: 0;
        flex-shrink: 0;
        width: 100px;
        margin: 5px;
        text-align: center;
      }
      .item img{
        display: block;
        width: 100%;
        height: auto;;
      }
    </style>
  </head>
  <body>
    <div class="wrapper">
        <div>
          <input type="file" class="pic" />
        </div>
        <div id="box">请将文件拖拽到此区域</div>
        <div class="result-wrapper">
          <h2>搜索结果</h2>
          <ul id="result">

          </ul>
        </div>
        <div class="list-wrapper">
          <h2>资源库</h2>
          <ul class="list" id="list">

          </ul>
        </div>
    </div>

    <script>
      var globalData = {
        source: []
      }
      

      function initData () {

        var xhr = new XMLHttpRequest();

        var url = '/source';
        var method = "GET"
        xhr.responseType = 'json'
        xhr.open(method,url);
        xhr.onreadystatechange = function(){
            if(xhr.readyState == 4 && xhr.status == 200){
              globalData.source = xhr.response.data
              render(globalData.source)
            }
        }
        xhr.send(null);

        function render (list) {
          var html = ''
          list.forEach(item => {
            html += `<li class="item"><img src="${item.src}" /><p>${item.name}</p></li>`
          })
          var parent = document.querySelector('.list')
          parent.innerHTML = html
        }

      }
      initData()

        const canvas = document.createElement('canvas')
        document.body.appendChild(canvas)
        const context = canvas.getContext('2d')
        
        
        // 缩小到50x50
        function toZoom(file) {
          canvas.width = 50
          canvas.height = 50
        
          const img = new Image()
          if (typeof file !== 'string') {
            file = URL.createObjectURL(file)
          }
          img.src = file
          return new Promise((resolve, reject) => {
            img.onload = function () {
              context.drawImage(img, 0, 0, img.width, img.height, 0, 0, 50, 50)
              const imageData = context.getImageData(0, 0, 50, 50)
              resolve(imageData)
            }
          })
        }
        
        // 灰度
        function toGray(imageData) {
          const temp = []
          const data = imageData.data
          canvas.width = 50
          canvas.height = 50
        
          for (let i = 0; i < data.length; i += 4) {
            const gray = data[i] * .299 + data[i + 1] * .587 + data[i + 2] * .114 | 0
            data[i] = data[i + 1] = data[i + 2] = gray
            temp.push(gray)
          }
        
          return temp
        }
        
        // 大津法
        function toOtsu(grayData) {
          let histData = Array(256).fill(0)
          let total = grayData.length
        
          grayData.forEach(color => {
            let h = 0xFF & color
            histData[h]++
          })
        
        
          let sum = 0
          for (let i = 0; i < 256; i++) {
            sum += i * histData[i]
          }
        
          let sumB = 0
          let wB = 0
          let wF = 0
          let varMax = 0
          let threshold = 0
        
          for (let t = 0; t < 256; t++) {
            wB += histData[t]
            if (wB === 0) continue
            wF = total - wB
            if (wF === 0) break
        
            sumB += t * histData[t]
        
            let mB = sumB / wB
            let mF = (sum - sumB) / wF
        
            let varBetween = wB * wF * (mB - mF) ** 2
        
            if (varBetween > varMax) {
              varMax = varBetween
              threshold = t
            }
          }
        
          return threshold
        }
        
        // 二值化
        function toBinary(grayData, index) {
          const threshold = toOtsu(grayData, index)
          const imageData = context.createImageData(50, 50)
          const data = imageData.data
          const temp = []
        
          grayData.forEach((v, i) => {
            let gray = v > threshold ? 255 : 0
            data[i * 4] = data[i * 4 + 1] = data[i * 4 + 2] = gray
            data[i * 4 + 3] = 255
            temp.push(gray > 0 ? 0 : 1)
          })
        
          return temp
        }
        
        const inputs = document.querySelectorAll('input[type=file]')
        const compareHandler = document.querySelector('#compareHandler')
        const compareText = document.querySelector('#compareText')
        const thresholds = document.querySelectorAll('.thresholdText')
        
        async function createCompare(file) { 
          return new Promise((resolve, reject) => {
            toZoom(file)
              .then(imageData => {
                console.log('imageData', imageData)
                const grayData = toGray(imageData, 0)
                console.log('grayData', grayData)
                const data = toBinary(grayData, 0)
                console.log('data', data)
                resolve(data)
              })
          })
        }
        

        var pic = document.querySelector('.pic')

        async function onChange (file) {
          var compareData = await createCompare(file)

          for (let i = 0, l = globalData.source.length; i < l; i++) {
            let pic = globalData.source[i]
            let compareData2 = await createCompare(pic.src)
            let count = 0
            const total = compareData.length
            for (let i = 0; i < total; i++) {
              count += +!(compareData[i] ^ compareData2[i])
            }
            let result = count / total
            console.log('相似度：' + ( count / total * 100).toLocaleString() + '%')
            console.log(count, total, result)
            if (result > 0.9) {
              var resultNode = document.getElementById('result')
              var tempNode = document.createElement('div')
              var itemHtml = `<li class="item"><img src="${pic.src}" /><p>${pic.name}</p><p>相似度：${(count / total * 100).toFixed(3) + '%'}</p></li>`
              tempNode.innerHTML = itemHtml
              resultNode.appendChild(tempNode.firstChild)
            }
          }
        }
        pic.addEventListener('change', function(e) {
          onChange(e.target.files[0])
        }, false)
        
        </script>


<script>
    window.onload = function () {
     var oBox = document.getElementById('box');
     document.ondragover = function(){

     };
     oBox.ondragenter = function(){
      oBox.innerHTML = '请释放鼠标';
     };
     oBox.ondragover = function(){
      return false;
     };
     oBox.ondragleave = function(){
      oBox.innerHTML = '请将文件拖拽到此区域';
     };
     oBox.ondrop = function(ev){
        var oFile = ev.dataTransfer.files[0];
        onChange(oFile)
        return false;
     };
    };
   </script>
  </body>
</html>
